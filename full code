import requests
from PyQt5.uic.properties import QtGui
from PyQt5.QtGui import QIntValidator
from bs4 import BeautifulSoup
from PyQt5.QtWidgets import *
from PyQt5 import QtWidgets
from PyQt5.QtCore import *
import mysql.connector
from flask import Flask
from flask import render_template
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import warnings
import itertools
from math import sqrt
from datetime import datetime
from numpy import concatenate
import math
"""
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.layers import LSTM, Bidirectional, GRU
from keras.layers.recurrent import LSTM
from sklearn.utils import shuffle
import plotly.offline as py
import plotly.graph_objs as go
import seaborn as sns
import matplotlib.pyplot as plt
#%matplotlib inline
py.init_notebook_mode(connected=True)
plt.style.use('fivethirtyeight')
"""

source = requests.get('https://kur.doviz.com/serbest-piyasa/amerikan-dolari')
soup = BeautifulSoup(source.text, 'html.parser')
basliklar = soup.findAll('div', attrs={'class':'data'})
for i in basliklar:
    print(i.text)

class ExchangeRate (QDialog):
    def __init__(self, parent=None):
        super(ExchangeRate,self).__init__(parent)
        self.horizontalGroupBox = QGroupBox("General Information")
        grid=QGridLayout()
        grid.setColumnStretch(1,10)
        grid.addWidget(QLabel("Ürün Kodu:"),0,0)
        grid.addWidget(QLabel("Maliyet:"),1,0)
        grid.addWidget(QLabel("Satış:"),2,0)
        grid.addWidget(QLabel("Dolar Kuru:"),3,0)
        grid.addWidget(QLabel("Sonuc:"), 4,0)
        grid.addWidget(QLabel("Sabit Kar:"), 5,0)
        grid.addWidget(QLabel("Ürün Kodu:"),6,0)
        grid.addWidget(QLabel("Dolar Kuru:"), 7,0)
        grid.addWidget(QLabel("Sonuc 2:"), 8,0)
        grid.addWidget(QLabel("Net Kar"), 9,0)
        grid.addWidget(QLabel(""), 10,0)
        self.urun = QtWidgets.QLineEdit(self)
        self.m = QtWidgets.QLineEdit(self)
        self.s = QtWidgets.QLineEdit(self)
        self.d = QtWidgets.QLineEdit(self)
        self.sonuc = QtWidgets.QLabel(self)
        self.kar = QtWidgets.QLabel(self)
        self.kod = QtWidgets.QLineEdit(self)
        self.dolarkuru = QtWidgets.QLineEdit(self)
        self.sonuc2 = QtWidgets.QLabel(self)
        self.netkar = QtWidgets.QLabel(self)
        grid.addWidget(self.urun, 0, 1)
        grid.addWidget(self.m, 1, 1)
        grid.addWidget(self.s, 2, 1)
        grid.addWidget(self.d, 3, 1)
        grid.addWidget(self.sonuc, 4, 1)
        grid.addWidget(self.kar, 5, 1)
        grid.addWidget(self.kod, 6, 1)
        grid.addWidget(self.dolarkuru, 7, 1)
        grid.addWidget(self.sonuc2, 8, 1)
        grid.addWidget(self.netkar, 9, 1)
        hesapla = QPushButton("Hesapla")
        hesapla.clicked.connect(self.kaydet)
        grid.addWidget(hesapla)
        self.setLayout(grid)
        self.setWindowTitle("Exchange Rate")

    def kaydet(self):
        urunkodu = int(self.urun.text())
        maliyet = int(self.m.text())
        satis = int(self.s.text())
        kur = float(self.d.text())
        kar = float(satis-maliyet)
        self.kar.setText(('%d'%kar))
        sonuc = float((satis - maliyet)*kur)
        self.sonuc.setText('%d'%sonuc)
        kod = int(self.kod.text())
        dolarkuru = float(self.dolarkuru.text())
        sonuc2 = float(kar * dolarkuru)
        self.sonuc2.setText('%d'%sonuc2)
        netkar = float(sonuc2-sonuc)
        self.netkar.setText('%d'%netkar)
        baglanti=mysql.connector.connect(user="root",password="",host="127.0.0.1",database="exchange")
        isaretci=baglanti.cursor()
        isaretci.execute('''INSERT INTO rate (urunkodu, maliyet, satis, kur, sonuc, kar, kod, dolarkuru, sonuc2, netkar)  VALUES("%s","%s","%s", "%s", "%d", "%d","%s", "%s", "%d","%d")'''%(urunkodu, maliyet, satis, kur, sonuc, kar, kod, dolarkuru, sonuc2, netkar))
        baglanti.commit()
        baglanti.close()

numpy_array = np.array([6.05, 7.56, 7.00, 6.50, 6.70, 7.12, 7.40, 7.65, 8.00, 8.10, 8.12, 8.56])
print("1 yıllık Dolar Kuru Değerleri:")
print(numpy_array)
print("Dolar Kurunun Maximum Değeri:")
print(numpy_array.max())
print("Dolar Kurunun Minimum Değeri:")
print(numpy_array.min())
print("Yıllık Dolar Kuru Ortalaması:")
print(numpy_array.mean())
print("******************")

kur_listesi= {"aylar":["ocak","subat","mart","nisan","mayis","haziran","temmuz","agustos","eylul","ekim","kasim","aralik"],
                  "kur":[6.05, 7.56, 7.00, 6.50, 6.70, 7.12, 7.40, 7.65, 8.00, 8.10, 8.12, 8.56]}
dataframe = pd.DataFrame(kur_listesi)
print(dataframe)

plt.scatter(dataframe.aylar, dataframe.kur)
plt.title("Aylara Göre Kur Dağılımı")
plt.xlabel("Aylar")
plt.ylabel("Kurlar")
plt.show()
"""
data = pd.read_excel('usd_alis.xlsx', date_parser=[0])
data.head()
data['usd_alis'].interpolate(method='linear', inplace=True)

fig = plt.figure(figsize=(15,8))
data.usd_alis.plot(label='usd alış')
plt.legend(loc='best')
plt.title('Daily Exchange Rates, Buy', fontsize=14)
plt.show()

values = data['usd_alis'].values.reshape(-1,1)
values = values.astype('float32')
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(values)
dataset[0:5]

TRAIN_SIZE = 0.60
train_size = int(len(dataset) * TRAIN_SIZE)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size, :], dataset[train_size:len(dataset), :]
print("Gün Sayıları (training set, test set): " + str((len(train), len(test))))

def create_dataset(dataset, window_size = 1):
    data_X, data_Y = [], []
    for i in range(len(dataset) - window_size - 1):
        a = dataset[i:(i + window_size), 0]
        data_X.append(a)
        data_Y.append(dataset[i + window_size, 0])
    return(np.array(data_X), np.array(data_Y))

window_size = 1
train_X, train_Y = create_dataset(train, window_size)
test_X, test_Y = create_dataset(test, window_size)
print("Original training data shape:")
print(train_X.shape)
train_X = np.reshape(train_X, (train_X.shape[0], 1, train_X.shape[1]))
test_X = np.reshape(test_X, (test_X.shape[0], 1, test_X.shape[1]))
print("New training data shape:")
print(train_X.shape)


def fit_model(train_X, train_Y, window_size=1):
    model = Sequential()
    model.add(LSTM(100,
                   input_shape=(1, window_size)))
    model.add(Dense(1))
    model.compile(loss="mean_squared_error",
                  optimizer="adam")
    model.fit(train_X,
              train_Y,
              epochs=30,
              batch_size=1,
              verbose=1)

    return (model)

def predict_and_score(model, X, Y):
    pred = scaler.inverse_transform(model.predict(X))
    orig_data = scaler.inverse_transform([Y])
    score = math.sqrt(mean_squared_error(orig_data[0], pred[:, 0]))
    return(score, pred)
rmse_train, train_predict = predict_and_score(model1, train_X, train_Y)
rmse_test, test_predict = predict_and_score(model1, test_X, test_Y)
print("Training data score: %.2f RMSE" % rmse_train)
print("Test data score: %.2f RMSE" % rmse_test)

train_predict_plot = np.empty_like(dataset)
train_predict_plot[:, :] = np.nan
train_predict_plot[window_size:len(train_predict) + window_size, :] = train_predict

test_predict_plot = np.empty_like(dataset)
test_predict_plot[:, :] = np.nan
test_predict_plot[len(train_predict) + (window_size * 2) + 1:len(dataset) - 1, :] = test_predict

plt.figure(figsize = (15, 5))
plt.plot(scaler.inverse_transform(dataset), label = "True value")
plt.plot(train_predict_plot, label = "Training set prediction")
plt.plot(test_predict_plot, label = "Test set prediction")
plt.xlabel("Days")
plt.ylabel("Exchange Rates")
plt.title("Comparison true vs. predicted training / test")
plt.legend()
plt.show()
"""

uyg=QApplication([])
pencere=ExchangeRate()
pencere.show()
uyg.exec_()

app = Flask(__name__)
x_ekseni = ["ocak","subat","mart","nisan","mayis","haziran","temmuz","agustos","eylul","ekim","kasim","aralik"]
y_ekseni = [6.05, 7.56, 7.00, 6.50, 6.70, 7.12, 7.40, 7.65, 8.00, 8.10, 8.12, 8.56]

@app.route("/")
def anaSayfa():
    source = requests.get('https://kur.doviz.com/serbest-piyasa/amerikan-dolari')
    soup = BeautifulSoup(source.text, 'html.parser')
    basliklar = soup.findAll('div', attrs={'class': 'data'})
    for i in basliklar:
        return(i.text)

@app.route("/barchart")
def barchart():
    return render_template('bar_chart.html', title='Aylara göre kur oranı', max=10,labels=x_ekseni,values=y_ekseni)

@app.route("/linechart")
def linechart():
    return render_template('line_chart.html', title='Aylara göre kur oranı', max=10, labels=x_ekseni,values=y_ekseni)


if __name__=="__main__":
    app.run()
